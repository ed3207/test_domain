[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OJS Variables",
    "section": "",
    "text": "Closeread makes scrolling progress available to users as Observable JavasScript variables, so you can create Closeread sections with interactive graphics that change as you scroll.\nLet’s use this functionality to make a visualization of a globe. Before we start, let’s define some cities that we’ll plot on that globe. Here I’ve done it in OJS, but you could easily make an R or Python data frame available using ojs_define() (or load a CSV from elsewhere):\n\ncities = [\n  { name: \"Brisbane\",  lat: -27.467778, lon: 153.028056 },\n  { name: \"New Delhi\", lat: 28.613889,  lon: 77.208889 },\n  { name: \"Singapore\", lat: 1.283333,   lon: 103.833333 },\n  { name: \"Istanbul\",  lat: 41.013611,  lon: 28.955 },\n  { name: \"Paris\",     lat: 48.856667,  lon: 2.352222 },\n  { name: \"Nairobi\",   lat: -1.286389,  lon: 36.817222 },\n  { name: \"São Paulo\", lat: -23.55,     lon: -46.633333 },\n  { name: \"Montreal\",  lat: 45.508889,  lon: -73.554167 },\n  { name: \"Houston\",   lat: 29.762778,  lon: -95.383056 },\n  { name: \"Vancouver\", lat: 49.260833,  lon: -123.113889 },\n  { name: \"Honolulu\",  lat: 21.306944,  lom: -157.858333 }\n]\n\n\n\n\n\n\nNow let’s load data that describes the shape of the continents.\n\nworld = FileAttachment(\"naturalearth-land-110m.geojson\").json()\n\n\n\n\n\n\nThe cities above wrap the entire globe, so to view them all we’ll need to be give the user the ability to spin the globe. We’ll map the progress of the user’s scroll, stored in a variable called crProgressBlock, to a variable called angle. The scale.Linear function handles the linear mapping of crProgressBlock going from 0 to 1 to angle going from -180 to 0.\n\nangleScale1 = d3.scaleLinear()\n  .domain([0, 1])\n  .range([-180, 0])\n  .clamp(true)\n    \nangle1 = angleScale1(crProgressBlock)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo see the OJS code that actually creates the globe, look into the source of this document. Here is the result:\n\n\n\n\n\nThis interactive globe visualization starts at an angle of 0 - the International Date Line.\n\n\n\n\nIt ends at an angle of 0: the prime median.\n\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.graticule(),\n    Plot.geo(world, {\n      fill: \"#222222\"\n    }),\n    Plot.sphere(),\n    Plot.dot(cities, {\n      x: \"lon\",\n      y: \"lat\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      size: 6\n    }),\n    Plot.text(cities, {\n      x: d =&gt; d.lon + 2,\n      y: d =&gt; d.lat + 2,\n      text: \"name\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      fontSize: 18,\n      textAnchor: \"start\"\n    }),\n  ],\n  projection: {\n    type: \"orthographic\",\n    rotate: [angle1, -10]\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`-----`\n\n\n\n\n\n\n\nmd`(derived) Angle 1: ${angle1.toFixed(1)}°`\n\n\n\n\n\n\n\nmd`(derived) Angle 2: ${angle2.toFixed(1)}°`\n\n\n\n\n\n\n\n\n\nAs you back and forth over this Closeread section, note the values of the OJS variables that Closeread makes available in OJS code cells:\n\ncrTriggerIndex is a number representing the index of the currently visible trigger (starting from 0 and going down through the document).\ncrTriggerProgress is a number between 0 and 1 representing how far the currently active trigger has progressed through the visible window.\ncrDirection is either \"up\" or \"down\", depending on the direction the user last scrolled.\ncrActiveSticky is the name of the currently visible sticky.\ncrProgressBlock is a number between 0 and 1 representing how far the currently active progress block has progressed through the visible window\n\nTo demonstrate the use of other OJS variables, we’ll recreate the spinning behavior by a more creative mapping of crTriggerIndex and crTriggerProgress to form angle2. [This second globe demonstrates some interesting behavior: angle2 was actually changing as a result of the two triggers used in making the first globe. ]\n\n\n\n\nWe want our globe to rotate with the scroll progress — between -180 and 180.\n\n\n\n\nInstead of trying to do the maths to scale it ourselves, we can make a scale with d3.\n\n\n\n\nThere are six narrative blocks that we want to scale over, but I’d like the scrolling to start a little late and end a little early — by the time the last block has just started.\n\n\n\n\nSo between 2.5 (because the scroll starts with the third trigger of the document) and 7.1. If the numbers go outside this range, we’ll clamp them so that the scrolling doesn’t continue.\n\n\n\n\nHere’s how we create that scale and then use it with Closeread’s variables, crTriggerIndex and crScrollProgress:\n\nangleScale2 = d3.scaleLinear()\n  .domain([2.5, 7.1])\n  .range([-180, 180])\n  .clamp(true)\n\nangle2 = angleScale2(\n  (crTriggerIndex != null ? crTriggerIndex : -1)\n    + crTriggerProgress)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith all that done, we can see our map!\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.graticule(),\n    Plot.geo(world, {\n      fill: \"#222222\"\n    }),\n    Plot.sphere(),\n    Plot.dot(cities, {\n      x: \"lon\",\n      y: \"lat\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      size: 6\n    }),\n    Plot.text(cities, {\n      x: d =&gt; d.lon + 2,\n      y: d =&gt; d.lat + 2,\n      text: \"name\",\n      fill: \"#eb343d\",\n      stroke: \"white\",\n      strokeWidth: 5,\n      paintOrder: \"stroke\",\n      fontSize: 18,\n      textAnchor: \"start\"\n    }),\n  ],\n  projection: {\n    type: \"orthographic\",\n    rotate: [angle2, -10]\n  }\n})\n\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\n\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  }
]